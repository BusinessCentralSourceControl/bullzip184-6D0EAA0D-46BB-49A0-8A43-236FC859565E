Report 6188701 "ForNAV Sales Statistics"
{
    Caption = 'Sales Statistics';
    UsageCategory = ReportsAndAnalysis;
    WordLayout = './Layouts/ForNAV Sales Statistics.docx';
    DefaultLayout = Word;

    dataset
    {
        dataitem(Args;"ForNAV Statistics Args.")
        {
            UseTemporary = true;
            PrintOnlyIfDetail = true;
            DataItemTableView = sorting("Currency Code");

            column(ReportForNavId_4146;4146)
            {
            } // Autogenerated by ForNav - Do not delete
            column(ReportForNav_Args;ReportForNavWriteDataItem('Args', Args))
            {
            }
            dataitem(SalesInvoiceHeader;"Sales Invoice Header")
            {
                CalcFields = Amount, "Amount Including VAT";
                DataItemLink = "Currency Code"=FIELD("Currency Code");
                DataItemTableView = sorting("Bill-to Customer No.");
                RequestFilterFields = "Posting Date", "Bill-to Customer No.", "Salesperson Code", "Payment Terms Code";

                column(ReportForNavId_5581;5581)
                {
                } // Autogenerated by ForNav - Do not delete
                column(ReportForNav_SalesInvoiceHeader;ReportForNavWriteDataItem('SalesInvoiceHeader', SalesInvoiceHeader))
                {
                }
                column(AmountLCY;Args.GetInvoiceAmountLCY(SalesInvoiceHeader))
                {
                IncludeCaption = false;
                }
                column(CostLCY;Args.GetInvoiceCostLCY(SalesInvoiceHeader))
                {
                IncludeCaption = false;
                }
                trigger OnPreDataItem();
                begin
                    if not Args.Invoices then CurrReport.Break;
                    // if Args."Customer No." then
                    //	 SetCurrentkey("Bill-to Customer No.");
                    ReportForNav.OnPreDataItem('SalesInvoiceHeader', SalesInvoiceHeader);
                end;
            }
            dataitem(SalesCrMemoHeader;"Sales Cr.Memo Header")
            {
                CalcFields = Amount, "Amount Including VAT";
                DataItemLink = "Currency Code"=FIELD("Currency Code");
                DataItemTableView = sorting("Bill-to Customer No.");

                column(ReportForNavId_8098;8098)
                {
                } // Autogenerated by ForNav - Do not delete
                column(ReportForNav_SalesCrMemoHeader;ReportForNavWriteDataItem('SalesCrMemoHeader', SalesCrMemoHeader))
                {
                }
                column(AmountLCY_CrMemo;Args.GetCreditMemoAmountLCY(SalesCrMemoHeader))
                {
                IncludeCaption = false;
                }
                column(CostLCY_CrMemo;Args.GetCreditMemoCostLCY(SalesCrMemoHeader))
                {
                IncludeCaption = false;
                }
                trigger OnPreDataItem();
                begin
                    if Args."Credit Memos" then begin
                        SalesInvoiceHeader.Copyfilter("Posting Date", "Posting Date");
                        SalesInvoiceHeader.Copyfilter("Bill-to Customer No.", "Bill-to Customer No.");
                        SalesInvoiceHeader.Copyfilter("Salesperson Code", "Salesperson Code");
                        SalesInvoiceHeader.Copyfilter("Payment Terms Code", "Payment Terms Code");
                        SalesInvoiceHeader.Copyfilter("Shortcut Dimension 1 Code", "Shortcut Dimension 1 Code");
                        SalesInvoiceHeader.Copyfilter("Shortcut Dimension 2 Code", "Shortcut Dimension 2 Code");
                        SalesInvoiceHeader.Copyfilter("Sell-to Customer No.", "Sell-to Customer No.");
                        SalesInvoiceHeader.Copyfilter("Location Code", "Location Code");
                        SalesInvoiceHeader.Copyfilter("Tax Area Code", "Tax Area Code");
                        SalesInvoiceHeader.Copyfilter("Responsibility Center", "Responsibility Center");
                    end
                    else
                        CurrReport.Break;
                    // if Args."Customer No." then
                    //	 SetCurrentkey("Bill-to Customer No.");
                    ReportForNav.OnPreDataItem('SalesCrMemoHeader', SalesCrMemoHeader);
                end;
            }
            trigger OnPreDataItem();
            begin
                ReportForNav.OnPreDataItem('Args', Args);
            end;
        }
    }
    requestpage
    {
        SaveValues = true;

        layout
        {
            area(content)
            {
                group(Options)
                {
                    Caption = 'Options';

                    group(Show)
                    {
                        Caption = 'Show';

                        field(Invoices;Args.Invoices)
                        {
                            ApplicationArea = Basic, Suite;
                            Caption = 'Invoices';
                        }
                        field(CreditMemos;Args."Credit Memos")
                        {
                            ApplicationArea = Basic, Suite;
                            Caption = 'Credit Memos';
                        }
                    }
                    group(GroupBy)
                    {
                        Caption = 'Group By';

                        field(CustomerNo;Args."Customer No.")
                        {
                            ApplicationArea = All;
                            Caption = 'Customer No.';
                        }
                    }
                    field(ForNavOpenDesigner;ReportForNavOpenDesigner)
                    {
                        ApplicationArea = All;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;

                        trigger OnValidate()begin
                            ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                            CurrReport.RequestOptionsPage.Close();
                        end;
                    }
                }
            }
        }
        actions
        {
        }
        trigger OnOpenPage()begin
            ReportForNavOpenDesigner:=false;
            if not Args.Invoices and not Args."Credit Memos" then begin
                Args.Invoices:=true;
                Args."Credit Memos":=true;
            end;
        end;
    }
    trigger OnInitReport()begin
        ;
        ReportsForNavInit;
        Codeunit.Run(Codeunit::"ForNAV First Time Setup");
        Commit;
        LoadWatermark;
    end;
    trigger OnPostReport()begin
    end;
    trigger OnPreReport()begin
        if not(Args.Invoices or Args."Credit Memos")then Args.TestField(Invoices);
        ;
        Args.CreateCurrencies;
        ;
        ReportsForNavPre;
    end;
    local procedure LoadWatermark()var ForNAVSetup: Record "ForNAV Setup";
    OutStream: OutStream;
    begin
        ForNAVSetup.Get;
        ForNAVSetup.CalcFields(ForNAVSetup."List Report Watermark (Lands.)");
        if not ForNAVSetup."List Report Watermark (Lands.)".Hasvalue then exit;
        ForNAVSetup."List Report Watermark (Lands.)".CreateOutstream(OutStream);
        ReportForNav.LoadWatermarkImage(ForNAVSetup.GetListReportWatermarkLandscape);
    end;
    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var ReportForNavInitialized: Boolean;
    ReportForNavShowOutput: Boolean;
    ReportForNavTotalsCausedBy: Integer;
    ReportForNavOpenDesigner: Boolean;
    [InDataSet]
    ReportForNavAllowDesign: Boolean;
    ReportForNav: Codeunit "ForNAV Report Management";
    local procedure ReportsForNavInit()var id: Integer;
    begin
        Evaluate(id, CopyStr(CurrReport.ObjectId(false), StrPos(CurrReport.ObjectId(false), ' ') + 1));
        ReportForNav.OnInit(id, ReportForNavAllowDesign);
    end;
    local procedure ReportsForNavPre()begin
        if ReportForNav.LaunchDesigner(ReportForNavOpenDesigner)then CurrReport.Quit();
    end;
    local procedure ReportForNavSetTotalsCausedBy(value: Integer)begin
        ReportForNavTotalsCausedBy:=value;
    end;
    local procedure ReportForNavSetShowOutput(value: Boolean)begin
        ReportForNavShowOutput:=value;
    end;
    local procedure ReportForNavInit(jsonObject: JsonObject)begin
        ReportForNav.Init(jsonObject, CurrReport.ObjectId);
    end;
    local procedure ReportForNavWriteDataItem(dataItemId: Text;
    rec: Variant): Text var values: Text;
    jsonObject: JsonObject;
    currLanguage: Integer;
    begin
        if not ReportForNavInitialized then begin
            jsonObject.Add('SalesInvoiceHeader$Get$Filters$Text', SalesInvoiceHeader.GetFilters());
            ReportForNavInit(jsonObject);
            ReportForNavInitialized:=true;
        end;
        case(dataItemId)of end;
        ReportForNav.AddDataItemValues(jsonObject, dataItemId, rec);
        jsonObject.WriteTo(values);
        exit(values);
    end;
// Reports ForNAV Autogenerated code - do not delete or modify -->
}
