Report 6188721 "ForNAV Statement"
{
    Caption = 'Statement';
    UsageCategory = ReportsAndAnalysis;
    WordLayout = './Layouts/ForNAV Statement.docx';
    DefaultLayout = Word;

    dataset
    {
        dataitem(Args;"ForNAV Statement Arguments")
        {
            UseTemporary = true;
            DataItemTableView = sorting("Start Date");

            column(ReportForNavId_1000000001;1000000001)
            {
            } // Autogenerated by ForNav - Do not delete
            column(ReportForNav_Args;ReportForNavWriteDataItem('Args', Args))
            {
            }
            trigger OnPreDataItem();
            begin
                Insert();
                ReportForNav.OnPreDataItem('Args', Args);
            end;
        }
        dataitem(Customer;Customer)
        {
            PrintOnlyIfDetail = true;
            CalcFields = Balance, "Balance Due";
            RequestFilterFields = "No.";

            column(ReportForNavId_2;2)
            {
            } // Autogenerated by ForNav - Do not delete
            column(ReportForNav_Customer;ReportForNavWriteDataItem('Customer', Customer))
            {
            }
            dataitem(CurrencyLoop;Currency)
            {
                UseTemporary = true;
                PrintOnlyIfDetail = true;
                DataItemTableView = sorting(Code);

                column(ReportForNavId_6523;6523)
                {
                } // Autogenerated by ForNav - Do not delete
                column(ReportForNav_CurrencyLoop;ReportForNavWriteDataItem('CurrencyLoop', CurrencyLoop))
                {
                }
                dataitem(DetailedCustLedgEntry;"Detailed Cust. Ledg. Entry")
                {
                    DataItemTableView = sorting("Customer No.", "Posting Date", "Entry Type", "Currency Code");

                    column(ReportForNavId_3;3)
                    {
                    } // Autogenerated by ForNav - Do not delete
                    column(ReportForNav_DetailedCustLedgEntry;ReportForNavWriteDataItem('DetailedCustLedgEntry', DetailedCustLedgEntry))
                    {
                    }
                    column(PrintLine;PrintLine)
                    {
                    IncludeCaption = false;
                    }
                    column(Description;Description)
                    {
                    IncludeCaption = false;
                    }
                    trigger OnPreDataItem();
                    begin
                        SetRange("Customer No.", Customer."No.");
                        SetRange("Posting Date", Args."Start Date", Args."Ending Date");
                        SetRange("Currency Code", CurrencyLoop.Code);
                        ReportForNav.OnPreDataItem('DetailedCustLedgEntry', DetailedCustLedgEntry);
                    end;
                    trigger OnAfterGetRecord();
                    var CustLedgerEntry: Record "Cust. Ledger Entry";
                    DetailedCustLedgEntry2: Record "Detailed Cust. Ledg. Entry";
                    begin
                        if Amount = 0 then CurrReport.Skip();
                        if Args."Show Only Open Entries" then begin
                            CustLedgerEntry.Get(DetailedCustLedgEntry."Cust. Ledger Entry No.");
                            if not CustLedgerEntry.Open then CurrReport.Skip();
                        end;
                        PrintLine:=true;
                        case "Entry Type" of "entry type"::"Initial Entry": begin
                        end;
                        "entry type"::Application: begin
                            DetailedCustLedgEntry2.SetCurrentkey("Customer No.", "Posting Date", "Entry Type");
                            DetailedCustLedgEntry2.SetRange("Customer No.", "Customer No.");
                            DetailedCustLedgEntry2.SetRange("Posting Date", "Posting Date");
                            DetailedCustLedgEntry2.SetRange("Entry Type", "entry type"::Application);
                            DetailedCustLedgEntry2.SetRange("Transaction No.", "Transaction No.");
                            DetailedCustLedgEntry2.SetFilter("Currency Code", '<>%1', "Currency Code");
                            if not DetailedCustLedgEntry2.IsEmpty then begin
                                Description:=MultiCurrencyApplicationTxt;
                            //DueDate := 0D;
                            end
                            else
                                PrintLine:=false;
                        end;
                        "entry type"::"Payment Discount", "entry type"::"Payment Discount (VAT Excl.)", "entry type"::"Payment Discount (VAT Adjustment)", "entry type"::"Payment Discount Tolerance", "entry type"::"Payment Discount Tolerance (VAT Excl.)", "entry type"::"Payment Discount Tolerance (VAT Adjustment)": begin
                            Description:=PaymentDiscountTxt;
                        end;
                        "entry type"::"Payment Tolerance", "entry type"::"Payment Tolerance (VAT Excl.)", "entry type"::"Payment Tolerance (VAT Adjustment)": begin
                            Description:=ApplicationWriteoffsTxt;
                        end;
                        "entry type"::"Appln. Rounding", "entry type"::"Correction of Remaining Amount": begin
                            Description:=RoundingTxt;
                        end;
                        end;
                    end;
                }
                dataitem(OverdueEntry;"Cust. Ledger Entry")
                {
                    CalcFields = "Original Amount", "Remaining Amount";
                    DataItemLink = "Customer No."=FIELD("No.");
                    DataItemLinkReference = Customer;
                    DataItemTableView = sorting("Customer No.", Open, Positive, "Due Date");

                    column(ReportForNavId_9065;9065)
                    {
                    } // Autogenerated by ForNav - Do not delete
                    column(ReportForNav_OverdueEntry;ReportForNavWriteDataItem('OverdueEntry', OverdueEntry))
                    {
                    }
                    trigger OnPreDataItem();
                    begin
                        SetRange("Customer No.", Customer."No.");
                        if not Args."Include Aging Band" then SetRange("Due Date", 0D, Args."Ending Date" - 1);
                        SetRange("Currency Code", CurrencyLoop.Code);
                        if(not Args."Show Overdue Entries") and (not Args."Include Aging Band")then CurrReport.Break();
                        ReportForNav.OnPreDataItem('OverdueEntry', OverdueEntry);
                    end;
                    trigger OnAfterGetRecord();
                    begin
                        if Args."Include Aging Band" then begin
                            if("Posting Date" > Args."Ending Date") and ("Due Date" >= Args."Ending Date")then CurrReport.Skip();
                            if Args.Date = Args.Date::"Due Date" then if "Due Date" >= Args."Ending Date" then CurrReport.Skip();
                        end;
                        CalcFields("Remaining Amount");
                        if "Remaining Amount" = 0 then CurrReport.Skip();
                        if "Due Date" >= Args."Ending Date" then CurrReport.Skip();
                    end;
                }
                trigger OnPreDataItem();
                begin
                    ReportForNav.OnPreDataItem('CurrencyLoop', CurrencyLoop);
                end;
                trigger OnAfterGetRecord();
                begin
                    Customer.SetRange("Date Filter", 0D, Args."Start Date" - 1);
                    Customer.SetRange("Currency Filter", CurrencyLoop.Code);
                    Customer.CalcFields("Net Change");
                end;
                trigger OnPostDataItem();
                begin
                    Customer.SetRange("Currency Filter");
                end;
            }
            dataitem(AgingBuffer;"ForNAV Aging Buffer")
            {
                UseTemporary = true;
                DataItemLink = "Account No."=FIELD("No.");
                DataItemTableView = sorting("Entry No.");

                column(ReportForNavId_1000000000;1000000000)
                {
                } // Autogenerated by ForNav - Do not delete
                column(ReportForNav_AgingBuffer;ReportForNavWriteDataItem('AgingBuffer', AgingBuffer))
                {
                }
                trigger OnPreDataItem();
                begin
                    ReportForNav.OnPreDataItem('AgingBuffer', AgingBuffer);
                end;
            }
            trigger OnPreDataItem();
            begin
                ReportForNav.OnPreDataItem('Customer', Customer);
            end;
            trigger OnAfterGetRecord();
            begin
                ChangeLanguage("Language Code");
                ProcessCustomer();
                UpdateAging();
            end;
        }
    }
    requestpage
    {
        SaveValues = true;

        layout
        {
            area(content)
            {
                group(Options)
                {
                    Caption = 'Options';

                    field(DocumentDate;Args."Document Date")
                    {
                        ApplicationArea = All;
                        Caption = 'Document Date';
                    }
                    field(StartDate;Args."Start Date")
                    {
                        ApplicationArea = All;
                        Caption = 'Start Date';
                    }
                    field(EndDate;Args."Ending Date")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Ending Date';
                    }
                    field(ShowOverdueEntries;Args."Show Overdue Entries")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Show Overdue Entries';
                    }
                    field(ShowOnlyOpenEntries;Args."Show Only Open Entries")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Show Only Open Entries';
                    }
                    group(Include)
                    {
                        Caption = 'Include';

                        field(IncludeAllCustomerswithLE;Args."Print All Having Balance")
                        {
                            ApplicationArea = Basic, Suite;
                            Caption = 'Include All Customers with a Balance';
                            MultiLine = true;

                            trigger OnValidate()begin
                                if not Args."Print All Having Entries" then Args."Print All Having Balance":=true;
                            end;
                        }
                        field(IncludeAllCustomerswithBalance;Args."Print All Having Entries")
                        {
                            ApplicationArea = Basic, Suite;
                            Caption = 'Include All Customers with Ledger Entries';
                            MultiLine = true;

                            trigger OnValidate()begin
                                if not Args."Print All Having Balance" then Args."Print All Having Entries":=true;
                            end;
                        }
                    }
                    group(Control10)
                    {
                        Caption = 'Aging Band by';

                        field(IncludeAgingBand;Args."Include Aging Band")
                        {
                            ApplicationArea = Basic, Suite;
                            Caption = 'Include Aging Band';
                        }
                        field(AgingBandPeriodLengt;Args."Period Length")
                        {
                            ApplicationArea = Basic, Suite;
                            Caption = 'Period Length';
                        }
                        field(AgingBandby;Args.Date)
                        {
                            ApplicationArea = Basic, Suite;
                            Caption = 'Aging Band by';
                        }
                    }
                    field(ForNavOpenDesigner;ReportForNavOpenDesigner)
                    {
                        ApplicationArea = All;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;

                        trigger OnValidate()begin
                            ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                            CurrReport.RequestOptionsPage.Close();
                        end;
                    }
                }
                group("Output Options")
                {
                    Caption = 'Output Options';

                    field(ReportOutput;SupportedOutputMethod)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Report Output';
                        OptionCaption = 'Print,Preview,Word,PDF,Email,XML - RDLC layouts only';

                        trigger OnValidate()var CustomLayoutReporting: Codeunit "Custom Layout Reporting";
                        begin
                            //ShowPrintRemaining := (SupportedOutputMethod = SupportedOutputMethod::Email);
                            case SupportedOutputMethod of Supportedoutputmethod::Print: ChosenOutputMethod:=CustomLayoutReporting.GetPrintOption;
                            Supportedoutputmethod::Preview: ChosenOutputMethod:=CustomLayoutReporting.GetPreviewOption;
                            Supportedoutputmethod::Word: ChosenOutputMethod:=CustomLayoutReporting.GetWordOption;
                            Supportedoutputmethod::Pdf: ChosenOutputMethod:=CustomLayoutReporting.GetPDFOption;
                            Supportedoutputmethod::Email: ChosenOutputMethod:=CustomLayoutReporting.GetEmailOption;
                            Supportedoutputmethod::Xml: ChosenOutputMethod:=CustomLayoutReporting.GetXMLOption;
                            end;
                        end;
                    }
                    field(ChosenOutput;ChosenOutputMethod)
                    {
                        ApplicationArea = Advanced;
                        Visible = false;
                    }
                    field(PrintMissingAddresses;PrintRemaining)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Print remaining statements';
                        Visible = false;
                    }
                }
            }
        }
        actions
        {
        }
        trigger OnOpenPage()begin
            ReportForNavOpenDesigner:=false;
            InitRequestPageDataInternal();
        end;
    }
    trigger OnInitReport()begin
        GLSetup.Get();
        ;
        ReportsForNavInit;
    end;
    trigger OnPostReport()begin
    end;
    trigger OnPreReport()begin
        ;
        Codeunit.Run(Codeunit::"ForNAV First Time Setup");
        Commit();
        LoadWatermark();
        ;
        ReportsForNavPre;
    end;
    var GLSetup: Record "General Ledger Setup";
    ForNAVSetup: Record "ForNAV Setup";
    PrintLine: Boolean;
    PrintRemaining: Boolean;
    Description: Text;
    MultiCurrencyApplicationTxt: Label 'Multicurrency Application';
    PaymentDiscountTxt: Label 'Payment Discount';
    RoundingTxt: Label 'Rounding';
    ApplicationWriteoffsTxt: Label 'Application Writeoffs';
    SupportedOutputMethod: Option Print, Preview, Word, Pdf, Email, Xml;
    ChosenOutputMethod: Integer;
    local procedure ChangeLanguage(LanguageCode: Code[10])var ForNAVSetup: Record "ForNAV Setup";
    begin
        ForNAVSetup.Get();
        IF ForNAVSetup."Inherit Language Code" THEN CurrReport.Language(ReportForNav.GetLanguageID(LanguageCode));
    end;
    local procedure ProcessCustomer()var Currency: Record Currency;
    begin
        CurrencyLoop.Reset;
        CurrencyLoop.DeleteAll;
        if not CurrReport.Preview then begin
            Customer.LockTable();
            Customer.Find();
            Customer."Last Statement No.":=Customer."Last Statement No." + 1;
            Customer.Modify();
            Commit();
        end
        else
            Customer."Last Statement No.":=Customer."Last Statement No." + 1;
        Customer.SetRange(Customer."Date Filter", 0D, Args."Ending Date");
        Customer.CalcFields(Customer."Net Change");
        if(Customer."Net Change" <> 0) or Args."Print All Having Balance" then begin
            CurrencyLoop.Code:='';
            CurrencyLoop.Insert();
            Customer.Copyfilter(Customer."Currency Filter", Currency.Code);
            if Currency.FindSet()then repeat CurrencyLoop:=Currency;
                    CurrencyLoop.Insert();
                until Currency.Next = 0;
        end;
    end;
    local procedure GetDate(PostingDate: Date;
    DueDate: Date): Date begin
        if Args.Date = Args.Date::"Posting Date" then exit(PostingDate);
        exit(DueDate);
    end;
    local procedure InitRequestPageDataInternal()begin
        if(not Args."Print All Having Entries") and (not Args."Print All Having Balance")then Args."Print All Having Balance":=true;
        if Format(Args."Period Length") = '' then Evaluate(Args."Period Length", '<1M+CM>');
        if Args."Document Date" = 0D then Args."Document Date":=Today;
        if Args."Start Date" = 0D then Args."Start Date":=WorkDate;
        if Args."Ending Date" = 0D then Args."Ending Date":=WorkDate;
    end;
    local procedure UpdateAging()var AgingArgs: Record "ForNAV Aged Accounts Args.";
    CustomerAging: Codeunit "ForNAV Customer Aging";
    begin
        if not Args."Include Aging Band" then exit;
        case Args.Date of Args.Date::"Due Date": AgingArgs."Aging By":=AgingArgs."aging by"::"Due Date";
        Args.Date::"Posting Date": AgingArgs."Aging By":=AgingArgs."aging by"::"Posting Date";
        end;
        AgingArgs."Ending Date":=Args."Ending Date";
        AgingArgs."Period Length":=Args."Period Length";
        AgingArgs."Column Count":=5;
        AgingArgs.CalcDates;
        CustomerAging.GetAging(Customer, AgingBuffer, AgingArgs);
    end;
    local procedure LoadWatermark()var ForNAVSetup: Record "ForNAV Setup";
    OutStream: OutStream;
    begin
        ForNAVSetup.Get();
        ForNAVSetup.CalcFields(ForNAVSetup."Document Watermark");
        if not ForNAVSetup."Document Watermark".Hasvalue()then exit;
        ReportForNav.LoadWatermarkImage(ForNAVSetup.GetDocumentWatermark);
    end;
    procedure InitializeRequest(NewPrintEntriesDue: Boolean;
    NewPrintAllHavingEntry: Boolean;
    NewPrintAllHavingBal: Boolean;
    NewIncludeAgingBand: Boolean;
    NewPeriodLength: Text[30];
    NewDateChoice: Option "Due Date", "Posting Date";
    NewStartDate: Date;
    NewEndDate: Date)begin
        InitRequestPageDataInternal();
        Args."Show Overdue Entries":=NewPrintEntriesDue;
        Args."Print All Having Entries":=NewPrintAllHavingEntry;
        Args."Print All Having Balance":=NewPrintAllHavingBal;
        Args."Include Aging Band":=NewIncludeAgingBand;
        Evaluate(Args."Period Length", NewPeriodLength);
        Args.Date:=NewDateChoice;
        Args."Start Date":=NewStartDate;
        Args."Ending Date":=NewEndDate;
    end;
    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var ReportForNavInitialized: Boolean;
    ReportForNavShowOutput: Boolean;
    ReportForNavTotalsCausedBy: Boolean;
    ReportForNavOpenDesigner: Boolean;
    [InDataSet]
    ReportForNavAllowDesign: Boolean;
    ReportForNav: Codeunit "ForNAV Report Management";
    local procedure ReportsForNavInit()var id: Integer;
    begin
        Evaluate(id, CopyStr(CurrReport.ObjectId(false), StrPos(CurrReport.ObjectId(false), ' ') + 1));
        ReportForNav.OnInit(id, ReportForNavAllowDesign);
    end;
    local procedure ReportsForNavPre()begin
        if ReportForNav.LaunchDesigner(ReportForNavOpenDesigner)then CurrReport.Quit();
    end;
    local procedure ReportForNavSetTotalsCausedBy(value: Boolean)begin
        ReportForNavTotalsCausedBy:=value;
    end;
    local procedure ReportForNavSetShowOutput(value: Boolean)begin
        ReportForNavShowOutput:=value;
    end;
    local procedure ReportForNavInit(jsonObject: JsonObject)begin
        ReportForNav.Init(jsonObject, CurrReport.ObjectId);
    end;
    local procedure ReportForNavWriteDataItem(dataItemId: Text;
    rec: Variant): Text var values: Text;
    jsonObject: JsonObject;
    currLanguage: Integer;
    begin
        if not ReportForNavInitialized then begin
            jsonObject.Add('Customer$Get$Caption$Text', Customer.TableCaption());
            jsonObject.Add('CurrencyLoop$Get$Caption$Text', CurrencyLoop.TableCaption());
            ReportForNavInit(jsonObject);
            ReportForNavInitialized:=true;
        end;
        case(dataItemId)of 'Customer': begin
            jsonObject.Add('CurrReport$Language$Integer', CurrReport.Language);
            currLanguage:=GlobalLanguage;
            GlobalLanguage:=1033;
            jsonObject.Add('DataItem$Customer$CurrentKey$Text', Customer.CurrentKey);
            GlobalLanguage:=currLanguage;
        end;
        end;
        ReportForNav.AddDataItemValues(jsonObject, dataItemId, rec);
        jsonObject.WriteTo(values);
        exit(values);
    end;
// Reports ForNAV Autogenerated code - do not delete or modify -->
}
