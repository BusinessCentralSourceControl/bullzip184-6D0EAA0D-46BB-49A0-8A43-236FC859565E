Report 6188711 "ForNAV Inv. to G/L Reconcile"
{
    Caption = 'Inventory to G/L Reconcile';
    UsageCategory = ReportsAndAnalysis;
    WordLayout = './Layouts/ForNAV Inv. to GL Reconcile.docx';
    DefaultLayout = Word;

    dataset
    {
        dataitem(Args;"ForNAV Inv. to G/L Arguments")
        {
            DataItemTableView = sorting("To Date");
            UseTemporary = true;

            column(ReportForNavId_1000000000;1000000000)
            {
            } // Autogenerated by ForNav - Do not delete
            column(ReportForNav_Args;ReportForNavWriteDataItem('Args', Args))
            {
            }
            dataitem(Item;Item)
            {
                CalcFields = "Cost is Posted to G/L";
                PrintOnlyIfDetail = true;
                RequestFilterFields = "No.", "Inventory Posting Group", "Costing Method", "Location Filter", "Variant Filter";

                column(ReportForNavId_1000000002;1000000002)
                {
                } // Autogenerated by ForNav - Do not delete
                column(ReportForNav_Item;ReportForNavWriteDataItem('Item', Item))
                {
                }
                dataitem(InvToGLBuffer;"ForNAV Inventory to G/L Buffer")
                {
                    CalcFields = "Pending Adj.";
                    DataItemTableView = sorting("Item No.", "Variant Code", "Location Code");
                    UseTemporary = true;

                    column(ReportForNavId_1000000001;1000000001)
                    {
                    } // Autogenerated by ForNav - Do not delete
                    column(ReportForNav_InvToGLBuffer;ReportForNavWriteDataItem('InvToGLBuffer', InvToGLBuffer))
                    {
                    }
                    trigger OnPreDataItem();
                    begin
                        ReportForNav.OnPreDataItem('InvToGLBuffer', InvToGLBuffer);
                    end;
                }
                trigger OnPreDataItem();
                begin
                    ReportForNav.OnPreDataItem('Item', Item);
                end;
                trigger OnAfterGetRecord();
                begin
                    Args.CreateBuffer(Item, InvToGLBuffer);
                end;
            }
            trigger OnPreDataItem();
            begin
                Insert;
                ReportForNav.OnPreDataItem('Args', Args);
            end;
        }
    }
    requestpage
    {
        SaveValues = true;

        layout
        {
            area(content)
            {
                group(Options)
                {
                    Caption = 'Options';

                    field(AsOfDate;Args."To Date")
                    {
                        ApplicationArea = All;
                        Caption = 'To Date';
                    }
                    group(Details)
                    {
                        Caption = 'Details';

                        field(BreakdownByVariants;Args."Variant Code")
                        {
                            ApplicationArea = All;
                            Caption = 'Variant Code';
                        }
                        field(BreakdownByLocation;Args."Location Code")
                        {
                            ApplicationArea = All;
                            Caption = 'Location Code';
                        }
                    }
                    field(UseAdditionalReportingCurrency;Args."Amounts in Add. Currency")
                    {
                        ApplicationArea = All;
                        Caption = 'Amounts in Add. Currency';
                    }
                    field(ForNavOpenDesigner;ReportForNavOpenDesigner)
                    {
                        ApplicationArea = All;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;

                        trigger OnValidate()begin
                            ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                            CurrReport.RequestOptionsPage.Close();
                        end;
                    }
                }
            }
        }
        actions
        {
        }
        trigger OnOpenPage()begin
            ReportForNavOpenDesigner:=false;
            if Args."To Date" = 0D then Args."To Date":=WorkDate;
        end;
    }
    trigger OnInitReport()begin
        ;
        ReportsForNavInit;
    end;
    trigger OnPostReport()begin
    end;
    trigger OnPreReport()begin
        ;
        Codeunit.Run(Codeunit::"ForNAV First Time Setup");
        Commit;
        LoadWatermark;
        ;
        ReportsForNavPre;
    end;
    local procedure LoadWatermark()var ForNAVSetup: Record "ForNAV Setup";
    OutStream: OutStream;
    begin
        ForNAVSetup.Get;
        ForNAVSetup.CalcFields(ForNAVSetup."List Report Watermark (Lands.)");
        if not ForNAVSetup."List Report Watermark (Lands.)".Hasvalue then exit;
        ForNAVSetup."List Report Watermark (Lands.)".CreateOutstream(OutStream);
        ReportForNav.LoadWatermarkImage(ForNAVSetup.GetListReportWatermarkLandscape);
    end;
    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var ReportForNavInitialized: Boolean;
    ReportForNavShowOutput: Boolean;
    ReportForNavTotalsCausedBy: Boolean;
    ReportForNavOpenDesigner: Boolean;
    [InDataSet]
    ReportForNavAllowDesign: Boolean;
    ReportForNav: Codeunit "ForNAV Report Management";
    local procedure ReportsForNavInit()var id: Integer;
    begin
        Evaluate(id, CopyStr(CurrReport.ObjectId(false), StrPos(CurrReport.ObjectId(false), ' ') + 1));
        ReportForNav.OnInit(id, ReportForNavAllowDesign);
    end;
    local procedure ReportsForNavPre()begin
        if ReportForNav.LaunchDesigner(ReportForNavOpenDesigner)then CurrReport.Quit();
    end;
    local procedure ReportForNavSetTotalsCausedBy(value: Boolean)begin
        ReportForNavTotalsCausedBy:=value;
    end;
    local procedure ReportForNavSetShowOutput(value: Boolean)begin
        ReportForNavShowOutput:=value;
    end;
    local procedure ReportForNavInit(jsonObject: JsonObject)begin
        ReportForNav.Init(jsonObject, CurrReport.ObjectId);
    end;
    local procedure ReportForNavWriteDataItem(dataItemId: Text;
    rec: Variant): Text var values: Text;
    jsonObject: JsonObject;
    currLanguage: Integer;
    begin
        if not ReportForNavInitialized then begin
            ReportForNavInit(jsonObject);
            ReportForNavInitialized:=true;
        end;
        case(dataItemId)of 'Item': begin
            currLanguage:=GlobalLanguage;
            GlobalLanguage:=1033;
            jsonObject.Add('DataItem$Item$CurrentKey$Text', Item.CurrentKey);
            GlobalLanguage:=currLanguage;
        end;
        end;
        ReportForNav.AddDataItemValues(jsonObject, dataItemId, rec);
        jsonObject.WriteTo(values);
        exit(values);
    end;
// Reports ForNAV Autogenerated code - do not delete or modify -->
}
