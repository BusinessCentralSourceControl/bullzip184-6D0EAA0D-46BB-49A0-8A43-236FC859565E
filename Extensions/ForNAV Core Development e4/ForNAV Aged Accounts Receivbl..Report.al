Report 6188691 "ForNAV Aged Accounts Receivbl."
{
    Caption = 'Aged Accounts Receivables';
    UsageCategory = ReportsAndAnalysis;
    WordLayout = './Layouts/ForNAV Aged Accounts Receivbl..docx';
    DefaultLayout = Word;

    dataset
    {
        dataitem(Args;"ForNAV Aged Accounts Args.")
        {
            UseTemporary = true;
            DataItemTableView = sorting("Print Amounts in LCY");

            column(ReportForNavId_1000000001;1000000001)
            {
            } // Autogenerated by ForNav - Do not delete
            column(ReportForNav_Args;ReportForNavWriteDataItem('Args', Args))
            {
            }
            dataitem(Account;Customer)
            {
                RequestFilterFields = "No.";

                column(ReportForNavId_6836;6836)
                {
                } // Autogenerated by ForNav - Do not delete
                column(ReportForNav_Account;ReportForNavWriteDataItem('Account', Account))
                {
                }
                dataitem(AgingBuffer;"ForNAV Aging Buffer")
                {
                    UseTemporary = true;
                    DataItemTableView = sorting("Currency Code");

                    column(ReportForNavId_6188691;6188691)
                    {
                    } // Autogenerated by ForNav - Do not delete
                    column(ReportForNav_AgingBuffer;ReportForNavWriteDataItem('AgingBuffer', AgingBuffer))
                    {
                    }
                    trigger OnPreDataItem();
                    begin
                        ReportForNav.OnPreDataItem('AgingBuffer', AgingBuffer);
                    end;
                }
                trigger OnPreDataItem();
                begin
                    ReportForNav.OnPreDataItem('Account', Account);
                end;
                trigger OnAfterGetRecord();
                begin
                    AgingCalculation.GetAgingWithCurrency(Account, AgingBuffer, CurrencyTotalsBuffer, Args, TempCurrency);
                    if AgingBuffer.IsEmpty then CurrReport.Skip;
                end;
            }
            dataitem(CurrencyTotalsBuffer;"ForNAV Aging Buffer")
            {
                UseTemporary = true;
                DataItemTableView = sorting("Currency Code");

                column(ReportForNavId_1000000000;1000000000)
                {
                } // Autogenerated by ForNav - Do not delete
                column(ReportForNav_CurrencyTotalsBuffer;ReportForNavWriteDataItem('CurrencyTotalsBuffer', CurrencyTotalsBuffer))
                {
                }
                trigger OnPreDataItem();
                begin
                    ReportForNav.OnPreDataItem('CurrencyTotalsBuffer', CurrencyTotalsBuffer);
                end;
            }
            trigger OnPreDataItem();
            begin
                Args.CalcDates;
                Args.Insert;
                ReportForNav.OnPreDataItem('Args', Args);
            end;
        }
    }
    requestpage
    {
        SaveValues = true;

        layout
        {
            area(content)
            {
                group(Options)
                {
                    Caption = 'Options';

                    field(AgedAsOf;Args."Ending Date")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Ending Date';
                    }
                    field(Agingby;Args."Aging By")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Aging by';
                    }
                    field(PeriodLength;Args."Period Length")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Period Length';
                    }
                    field(AmountsinLCY;Args."Print Amounts in LCY")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'All Amounts in LCY';
                    }
                    field(PrintDetails;Args."Print Details")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Print Details';
                    }
                    field(HeadingType;Args."Heading Type")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Heading Type';
                        Visible = false;
                    }
                    field(perCustomer;Args."New Page Per Customer")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'New Page per Customer';
                    }
                    field(ForNavOpenDesigner;ReportForNavOpenDesigner)
                    {
                        ApplicationArea = All;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;

                        trigger OnValidate()begin
                            ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                            CurrReport.RequestOptionsPage.Close();
                        end;
                    }
                }
            }
        }
        actions
        {
        }
        trigger OnOpenPage()begin
            ReportForNavOpenDesigner:=false;
            InitRequestPage;
        end;
    }
    labels
    {
    AgedOverdueAmounts='Aged Overdue Amounts';
    AmnsInLCY='All Amounts in LCY.';
    }
    trigger OnInitReport()begin
        ;
        ReportsForNavInit;
        Codeunit.Run(Codeunit::"ForNAV First Time Setup");
        Commit;
        LoadWatermark;
    end;
    var TempCurrency: Record Currency temporary;
    AgingCalculation: Codeunit "ForNAV Aging Calculation";
    local procedure LoadWatermark()var ForNAVSetup: Record "ForNAV Setup";
    OutStream: OutStream;
    begin
        ForNAVSetup.Get;
        ForNAVSetup.CalcFields(ForNAVSetup."List Report Watermark (Lands.)");
        if not ForNAVSetup."List Report Watermark (Lands.)".Hasvalue then exit;
        ForNAVSetup."List Report Watermark (Lands.)".CreateOutstream(OutStream);
        ReportForNav.LoadWatermarkImage(ForNAVSetup.GetListReportWatermarkLandscape);
    end;
    local procedure InitRequestPage()var Blank: DateFormula;
    begin
        if Args."Ending Date" = 0D then Args."Ending Date":=WorkDate;
        Args."Column Count":=5;
        if Args."Period Length" = Blank then begin
            Evaluate(Args."Period Length", '<1M>');
            Args."Print Details":=true;
        end;
    end;
    trigger OnPreReport();
    begin
        ;
        ReportsForNavPre;
    end;
    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var ReportForNavInitialized: Boolean;
    ReportForNavShowOutput: Boolean;
    ReportForNavTotalsCausedBy: Boolean;
    ReportForNavOpenDesigner: Boolean;
    [InDataSet]
    ReportForNavAllowDesign: Boolean;
    ReportForNav: Codeunit "ForNAV Report Management";
    local procedure ReportsForNavInit()var id: Integer;
    begin
        Evaluate(id, CopyStr(CurrReport.ObjectId(false), StrPos(CurrReport.ObjectId(false), ' ') + 1));
        ReportForNav.OnInit(id, ReportForNavAllowDesign);
    end;
    local procedure ReportsForNavPre()begin
        if ReportForNav.LaunchDesigner(ReportForNavOpenDesigner)then CurrReport.Quit();
    end;
    local procedure ReportForNavSetTotalsCausedBy(value: Boolean)begin
        ReportForNavTotalsCausedBy:=value;
    end;
    local procedure ReportForNavSetShowOutput(value: Boolean)begin
        ReportForNavShowOutput:=value;
    end;
    local procedure ReportForNavInit(jsonObject: JsonObject)begin
        ReportForNav.Init(jsonObject, CurrReport.ObjectId);
    end;
    local procedure ReportForNavWriteDataItem(dataItemId: Text;
    rec: Variant): Text var values: Text;
    jsonObject: JsonObject;
    currLanguage: Integer;
    begin
        if not ReportForNavInitialized then begin
            jsonObject.Add('Account$Get$Filters$Text', Account.GetFilters());
            jsonObject.Add('Account$Get$Caption$Text', Account.TableCaption());
            ReportForNavInit(jsonObject);
            ReportForNavInitialized:=true;
        end;
        case(dataItemId)of 'Account': begin
            currLanguage:=GlobalLanguage;
            GlobalLanguage:=1033;
            jsonObject.Add('DataItem$Account$CurrentKey$Text', Account.CurrentKey);
            GlobalLanguage:=currLanguage;
        end;
        end;
        ReportForNav.AddDataItemValues(jsonObject, dataItemId, rec);
        jsonObject.WriteTo(values);
        exit(values);
    end;
// Reports ForNAV Autogenerated code - do not delete or modify -->
}
