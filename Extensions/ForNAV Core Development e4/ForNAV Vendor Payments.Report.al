Report 6188682 "ForNAV Vendor Payments"
{
    Caption = 'Vendor Payments';
    UsageCategory = ReportsAndAnalysis;
    WordLayout = './Layouts/ForNAV Vendor Payments.docx';
    DefaultLayout = Word;

    dataset
    {
        dataitem(Args;"ForNAV Vendor Payments Args.")
        {
            DataItemTableView = sorting("Consider Discount");
            UseTemporary = true;

            column(ReportForNavId_1;1)
            {
            } // Autogenerated by ForNav - Do not delete
            column(ReportForNav_Args;ReportForNavWriteDataItem('Args', Args))
            {
            }
            dataitem(Vendor;Vendor)
            {
                PrintOnlyIfDetail = true;
                RequestFilterFields = "No.", "Vendor Posting Group", "Purchaser Code", Priority, "Payment Method Code";

                column(ReportForNavId_3182;3182)
                {
                } // Autogenerated by ForNav - Do not delete
                column(ReportForNav_Vendor;ReportForNavWriteDataItem('Vendor', Vendor))
                {
                }
                dataitem("Vendor Ledger Entry";"Vendor Ledger Entry")
                {
                    CalcFields = Amount, "Remaining Amount", "Remaining Amt. (LCY)", "Amount (LCY)";
                    DataItemLink = "Vendor No."=FIELD("No."), "Global Dimension 1 Code"=FIELD("Global Dimension 1 Filter"), "Global Dimension 2 Code"=FIELD("Global Dimension 2 Filter");
                    DataItemTableView = sorting("Vendor No.", Open, Positive, "Due Date", "Currency Code")where(Open=const(true), "On Hold"=const(''));

                    column(ReportForNavId_4114;4114)
                    {
                    } // Autogenerated by ForNav - Do not delete
                    column(ReportForNav_VendorLedgerEntry;ReportForNavWriteDataItem('VendorLedgerEntry', "Vendor Ledger Entry"))
                    {
                    }
                    column(DiscountToTake;DiscountToTake)
                    {
                    IncludeCaption = false;
                    }
                    trigger OnPreDataItem();
                    begin
                        FilterGroup(-1);
                        SetRange("Pmt. Discount Date", Args."Payment Date", Args."Payment Discount Date");
                        SetRange("Due Date", 0D, Args."Due Date Filter");
                        FilterGroup(0);
                        SetCurrentkey("Original Pmt. Disc. Possible");
                        ReportForNav.OnPreDataItem('VendorLedgerEntry', "Vendor Ledger Entry");
                    end;
                    trigger OnAfterGetRecord();
                    begin
                        if "Original Pmt. Disc. Possible" < 0 then SetRange("Date Filter", Args."Payment Date", Args."Payment Discount Date");
                        CalcAmounts("Vendor Ledger Entry");
                    end;
                }
                trigger OnPreDataItem();
                begin
                    if(Args."Due Date Filter" = 0D)then Args.TestField("Consider Discount");
                    if not Args."Consider Discount" then Args.TestField("Due Date Filter");
                    ReportForNav.OnPreDataItem('Vendor', Vendor);
                end;
            }
            trigger OnPreDataItem();
            begin
                ReportForNav.OnPreDataItem('Args', Args);
            end;
            trigger OnAfterGetRecord();
            begin
                if Args."Payment Date" = 0D then Args."Payment Date":=WorkDate;
                if "Consider Discount" and (Args."Payment Discount Date" < Args."Payment Date")then Args."Payment Discount Date":=Args."Payment Date";
            end;
        }
    }
    requestpage
    {
        SaveValues = true;

        layout
        {
            area(content)
            {
                group(Options)
                {
                    Caption = 'Options';

                    field(PaymentDate;Args."Payment Date")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Payment Date';
                    }
                    field(DueDateFilter;Args."Due Date Filter")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Due Date Filter';
                    }
                    field(TakePaymentDiscounts;Args."Consider Discount")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Consider Discount';
                    }
                    field(LastDiscDateToTake;Args."Payment Discount Date")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Payment Discount Date';
                    }
                    field(UseLocalCurrency;Args."Print Amounts in LCY")
                    {
                        ApplicationArea = Suite;
                        Caption = 'Print Amounts in LCY';
                    }
                    field(UseExternalDocumentNo;Args."External Document No.")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'External Document No.';
                    }
                    field(ForNavOpenDesigner;ReportForNavOpenDesigner)
                    {
                        ApplicationArea = All;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;

                        trigger OnValidate()begin
                            ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                            CurrReport.RequestOptionsPage.Close();
                        end;
                    }
                }
            }
        }
        trigger OnOpenPage()begin
            ReportForNavOpenDesigner:=false;
            if(Args."Due Date Filter" = 0D) and (not Args."Consider Discount")then Args."Consider Discount":=true;
            if Args."Payment Date" = 0D then Args."Payment Date":=WorkDate;
            if Args."Due Date Filter" = 0D then Args."Due Date Filter":=WorkDate;
        end;
        trigger OnClosePage()begin
            if not Args."Consider Discount" then Args."Payment Discount Date":=0D
            else if Args."Payment Discount Date" < Args."Payment Date" then Args."Payment Discount Date":=Args."Payment Date";
        end;
    }
    trigger OnInitReport()begin
        ;
        ReportsForNavInit;
        Codeunit.Run(Codeunit::"ForNAV First Time Setup");
        Commit;
        LoadWatermark;
    end;
    trigger OnPostReport()begin
    end;
    trigger OnPreReport()begin
        ;
        Args.Insert;
        ;
        ReportsForNavPre;
    end;
    var DiscountToTake: Decimal;
    procedure CalcAmounts(VendorLedgerEntry: Record "Vendor Ledger Entry")var DiscountToTakeLCY: Decimal;
    Currency: Record Currency;
    CurrExchRate: Record "Currency Exchange Rate";
    begin
        VendorLedgerEntry.SetRange("Date Filter", 0D, Args."Due Date Filter");
        VendorLedgerEntry.CalcFields(Amount, "Remaining Amount", "Remaining Amt. (LCY)");
        if(VendorLedgerEntry."Original Pmt. Disc. Possible" < 0) and (VendorLedgerEntry."Pmt. Discount Date" >= Args."Payment Date")then DiscountToTake:=-VendorLedgerEntry."Original Pmt. Disc. Possible"
        else
            DiscountToTake:=0;
        if(Vendor."Currency Code" <> '')then begin
            if VendorLedgerEntry."Remaining Amount" <> 0 then DiscountToTakeLCY:=DiscountToTake * VendorLedgerEntry."Remaining Amt. (LCY)" / VendorLedgerEntry."Remaining Amount"
            else
                DiscountToTakeLCY:=0;
            if Args."Print Amounts in LCY" then begin
                if VendorLedgerEntry."Currency Code" <> Vendor."Currency Code" then DiscountToTake:=ROUND(CurrExchRate.ExchangeAmtFCYToFCY(Args."Payment Date", VendorLedgerEntry."Currency Code", Vendor."Currency Code", DiscountToTake), Currency."Amount Rounding Precision");
            end
            else
                DiscountToTake:=DiscountToTakeLCY;
        end;
    end;
    local procedure LoadWatermark()var ForNAVSetup: Record "ForNAV Setup";
    OutStream: OutStream;
    begin
        ForNAVSetup.Get;
        ForNAVSetup.CalcFields(ForNAVSetup."List Report Watermark (Lands.)");
        if not ForNAVSetup."List Report Watermark (Lands.)".Hasvalue then exit;
        ForNAVSetup."List Report Watermark (Lands.)".CreateOutstream(OutStream);
        ReportForNav.LoadWatermarkImage(ForNAVSetup.GetListReportWatermarkLandscape);
    end;
    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var ReportForNavInitialized: Boolean;
    ReportForNavShowOutput: Boolean;
    ReportForNavTotalsCausedBy: Boolean;
    ReportForNavOpenDesigner: Boolean;
    [InDataSet]
    ReportForNavAllowDesign: Boolean;
    ReportForNav: Codeunit "ForNAV Report Management";
    local procedure ReportsForNavInit()var id: Integer;
    begin
        Evaluate(id, CopyStr(CurrReport.ObjectId(false), StrPos(CurrReport.ObjectId(false), ' ') + 1));
        ReportForNav.OnInit(id, ReportForNavAllowDesign);
    end;
    local procedure ReportsForNavPre()begin
        if ReportForNav.LaunchDesigner(ReportForNavOpenDesigner)then CurrReport.Quit();
    end;
    local procedure ReportForNavSetTotalsCausedBy(value: Boolean)begin
        ReportForNavTotalsCausedBy:=value;
    end;
    local procedure ReportForNavSetShowOutput(value: Boolean)begin
        ReportForNavShowOutput:=value;
    end;
    local procedure ReportForNavInit(jsonObject: JsonObject)begin
        ReportForNav.Init(jsonObject, CurrReport.ObjectId);
    end;
    local procedure ReportForNavWriteDataItem(dataItemId: Text;
    rec: Variant): Text var values: Text;
    jsonObject: JsonObject;
    currLanguage: Integer;
    begin
        if not ReportForNavInitialized then begin
            jsonObject.Add('Vendor$Get$Filters$Text', Vendor.GetFilters());
            jsonObject.Add('Vendor$Get$Caption$Text', Vendor.TableCaption());
            ReportForNavInit(jsonObject);
            ReportForNavInitialized:=true;
        end;
        case(dataItemId)of 'Vendor': begin
            currLanguage:=GlobalLanguage;
            GlobalLanguage:=1033;
            jsonObject.Add('DataItem$Vendor$CurrentKey$Text', Vendor.CurrentKey);
            GlobalLanguage:=currLanguage;
        end;
        end;
        ReportForNav.AddDataItemValues(jsonObject, dataItemId, rec);
        jsonObject.WriteTo(values);
        exit(values);
    end;
// Reports ForNAV Autogenerated code - do not delete or modify -->
}
